syntax = "proto3";

package raft;
option go_package = "pb/raft";
service RaftService {
  // RequestVote RPC
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {}
  // AppendEntries RPC (used for heartbeat and replication)
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}
}

// Vote request message
message RequestVoteRequest {
  int64 term = 1;              // candidate's term
  string candidateId = 2;      // candidate requesting vote
  int64 lastLogIndex = 3;      // index of candidate's last log entry
  int64 lastLogTerm = 4;       // term of candidate's last log entry
}

// Vote response message
message RequestVoteResponse {
  int64 term = 1;        // currentTerm, for candidate to update itself
  bool voteGranted = 2;  // true means candidate received vote
}

// Heartbeat/AppendEntries request message
message AppendEntriesRequest {
  int64 term = 1;         // leader's term
  string leaderId = 2;    // so follower can redirect clients
  int64 prevLogIndex = 3; // index of log entry immediately preceding new ones
  int64 prevLogTerm = 4;  // term of prevLogIndex entry
  repeated LogEntry entries = 5; // log entries to store (empty for heartbeat)
  int64 leaderCommit = 6; // leader's commitIndex
}

// Heartbeat/AppendEntries response message
message AppendEntriesResponse {
  int64 term = 1;    // currentTerm, for leader to update itself
  bool success = 2;  // true if follower contained entry matching prevLogIndex and prevLogTerm
}

// Log entry message
message LogEntry {
  int64 term = 1;    // term when entry was received by leader
  bytes data = 2;    // command for state machine
}
